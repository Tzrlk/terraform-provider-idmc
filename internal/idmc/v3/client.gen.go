// Package v3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v3

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	common "terraform-provider-idmc/internal/idmc/common"

	"github.com/oapi-codegen/runtime"
)

// <editor-fold desc="constants" defaultstate="collapsed"> /////////////////////

// </editor-fold> //////////////////////////////////////////////////////////////
// <editor-fold desc="constants" defaultstate="collapsed"> /////////////////////

// </editor-fold> //////////////////////////////////////////////////////////////

// ApiErrorBody When the REST API encounters an error, it returns a REST API error object.
type ApiErrorBody struct {
	Error *ApiErrorBodyError `json:"error,omitempty"`
}

// ApiErrorBodyError defines model for apiErrorBodyError.
type ApiErrorBodyError struct {
	Code      *string      `json:"code,omitempty"`
	Details   *interface{} `json:"details,omitempty"`
	Message   *string      `json:"message,omitempty"`
	RequestId *string      `json:"requestId,omitempty"`
}

// CreateRoleRequestBody defines model for createRoleRequestBody.
type CreateRoleRequestBody struct {
	// Description Description of the role.
	Description *string `json:"description,omitempty"`

	// Name Name of the role.
	Name *string `json:"name,omitempty"`

	// Privileges IDs of the privileges to assign to the role.
	// A role must have at least one privilege assigned to it.
	Privileges *[]string `json:"privileges,omitempty"`
}

// CreateRoleResponseBody defines model for createRoleResponseBody.
type CreateRoleResponseBody struct {
	// CreateTime Date and time the role was created.
	CreateTime *string `json:"createTime,omitempty"`

	// CreatedBy User who created the role.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description Description of the role.
	Description *string `json:"description,omitempty"`

	// DisplayDescription Description displayed in the user interface.
	DisplayDescription *string `json:"displayDescription,omitempty"`

	// DisplayName Role name displayed in the user interface.
	DisplayName *string `json:"displayName,omitempty"`

	// Id Role ID.
	Id *string `json:"id,omitempty"`

	// OrgId ID of the organization the role belongs to.
	OrgId      *string              `json:"orgId,omitempty"`
	Privileges *[]RolePrivilegeItem `json:"privileges,omitempty"`

	// RoleName Name of the role.
	RoleName *string `json:"roleName,omitempty"`

	// Status Whether the organization's license to use the role is valid or has expired.
	Status *string `json:"status,omitempty"`

	// SystemRole Whether the role is a system-defined role.
	SystemRole *bool `json:"systemRole,omitempty"`

	// UpdateTime Date and time the role was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`

	// UpdatedBy User who last updated the role.
	UpdatedBy *string `json:"updatedBy,omitempty"`
}

// GetRolesResponseBody defines model for getRolesResponseBody.
type GetRolesResponseBody = []GetRolesResponseBodyItem

// GetRolesResponseBodyItem defines model for getRolesResponseBodyItem.
type GetRolesResponseBodyItem struct {
	// CreateTime Date and time the role was created.
	CreateTime *string `json:"createTime,omitempty"`

	// CreatedBy User who created the role.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description Description of the role.
	Description *string `json:"description,omitempty"`

	// DisplayDescription Description displayed in the user interface.
	DisplayDescription *string `json:"displayDescription,omitempty"`

	// DisplayName Role name displayed in the user interface.
	DisplayName *string `json:"displayName,omitempty"`

	// Id Role ID.
	Id *string `json:"id,omitempty"`

	// OrgId ID of the organization the role belongs to.
	OrgId      *string              `json:"orgId,omitempty"`
	Privileges *[]RolePrivilegeItem `json:"privileges,omitempty"`

	// RoleName Name of the role.
	RoleName *string `json:"roleName,omitempty"`

	// Status Whether the organization's license to use the role is valid or has expired.
	Status *string `json:"status,omitempty"`

	// SystemRole Whether the role is a system-defined role.
	SystemRole *bool `json:"systemRole,omitempty"`

	// UpdateTime Date and time the role was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`

	// UpdatedBy User who last updated the role.
	UpdatedBy *string `json:"updatedBy,omitempty"`
}

// LoginRequestBody defines model for loginRequestBody.
type LoginRequestBody struct {
	// Password Informatica Intelligent Cloud Services password.
	Password string `json:"password"`

	// Username Informatica Intelligent Cloud Services user name for the organization that you want to log in to.
	Username string `json:"username"`
}

// LoginResponseBody defines model for loginResponseBody.
type LoginResponseBody struct {
	// Products Subscribed Informatica products.
	Products *[]LoginResponseBodyProduct `json:"products,omitempty"`
	UserInfo *LoginResponseBodyUserInfo  `json:"userInfo,omitempty"`
}

// LoginResponseBodyProduct defines model for loginResponseBodyProduct.
type LoginResponseBodyProduct struct {
	// BaseApiUrl Base API URL for the product. Use in REST API requests.
	BaseApiUrl *string `json:"baseApiUrl,omitempty"`

	// Name Product name.
	Name *string `json:"name,omitempty"`
}

// LoginResponseBodyUserInfo defines model for loginResponseBodyUserInfo.
type LoginResponseBodyUserInfo struct {
	// Groups User group information for the user.
	Groups *map[string]interface{} `json:"groups,omitempty"`

	// Id User ID.
	Id *string `json:"id,omitempty"`

	// Name User name.
	Name *string `json:"name,omitempty"`

	// OrgId ID of the organization the user belongs to.
	OrgId *string `json:"orgId,omitempty"`

	// OrgName Organization name.
	OrgName *string `json:"orgName,omitempty"`

	// ParentOrgId Organization ID for the parent.
	ParentOrgId *string `json:"parentOrgId,omitempty"`

	// SessionId REST API session ID for the current session. Use in most REST API request headers.
	SessionId *string `json:"sessionId,omitempty"`

	// Status Status of the user.
	Status *string `json:"status,omitempty"`
}

// RoleInfo defines model for roleInfo.
type RoleInfo struct {
	// CreateTime Date and time the role was created.
	CreateTime *string `json:"createTime,omitempty"`

	// CreatedBy User who created the role.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description Description of the role.
	Description *string `json:"description,omitempty"`

	// DisplayDescription Description displayed in the user interface.
	DisplayDescription *string `json:"displayDescription,omitempty"`

	// DisplayName Role name displayed in the user interface.
	DisplayName *string `json:"displayName,omitempty"`

	// Id Role ID.
	Id *string `json:"id,omitempty"`

	// OrgId ID of the organization the role belongs to.
	OrgId *string `json:"orgId,omitempty"`

	// RoleName Name of the role.
	RoleName *string `json:"roleName,omitempty"`

	// Status Whether the organization's license to use the role is valid or has expired.
	Status *string `json:"status,omitempty"`

	// SystemRole Whether the role is a system-defined role.
	SystemRole *bool `json:"systemRole,omitempty"`

	// UpdateTime Date and time the role was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`

	// UpdatedBy User who last updated the role.
	UpdatedBy *string `json:"updatedBy,omitempty"`
}

// RolePrivilegeItem defines model for rolePrivilegeItem.
type RolePrivilegeItem struct {
	// Description Description of the privilege.
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`

	// Name Name of the privilege.
	Name    *string `json:"name,omitempty"`
	Service *string `json:"service,omitempty"`
	Status  *string `json:"status,omitempty"`
}

// WithPrivilegeItems defines model for withPrivilegeItems.
type WithPrivilegeItems struct {
	Privileges *[]RolePrivilegeItem `json:"privileges,omitempty"`
}

// WithPrivilegeRefs defines model for withPrivilegeRefs.
type WithPrivilegeRefs struct {
	// Privileges IDs of the privileges to assign to the role.
	// A role must have at least one privilege assigned to it.
	Privileges *[]string `json:"privileges,omitempty"`
}

// HeaderSession defines model for headerSession.
type HeaderSession = string

// PathRole defines model for pathRole.
type PathRole = string

// N400 When the REST API encounters an error, it returns a REST API error object.
type N400 = ApiErrorBody

// N401 When the REST API encounters an error, it returns a REST API error object.
type N401 = ApiErrorBody

// N403 When the REST API encounters an error, it returns a REST API error object.
type N403 = ApiErrorBody

// N404 When the REST API encounters an error, it returns a REST API error object.
type N404 = ApiErrorBody

// N500 When the REST API encounters an error, it returns a REST API error object.
type N500 = ApiErrorBody

// N502 When the REST API encounters an error, it returns a REST API error object.
type N502 = ApiErrorBody

// N503 When the REST API encounters an error, it returns a REST API error object.
type N503 = ApiErrorBody

// RolePrivileges defines model for rolePrivileges.
type RolePrivileges = WithPrivilegeRefs

// <editor-fold desc="param-types" defaultstate="collapsed"> ///////////////////

// GetRolesParams defines parameters for GetRoles.
type GetRolesParams struct {
	// Q Query filter. You can filter using one of the following fields:
	// * roleId. Unique identifier for the role.
	// * roleName. Name of the role.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Expand Returns the privileges associated with the role specified in the query filter.
	Expand        *string       `form:"expand,omitempty" json:"expand,omitempty"`
	INFASESSIONID HeaderSession `json:"INFA-SESSION-ID"`
}

// DeleteRoleParams defines parameters for DeleteRole.
type DeleteRoleParams struct {
	INFASESSIONID HeaderSession `json:"INFA-SESSION-ID"`
}

// AddRolePrivilegesParams defines parameters for AddRolePrivileges.
type AddRolePrivilegesParams struct {
	INFASESSIONID HeaderSession `json:"INFA-SESSION-ID"`
}

// RemoveRolePrivilegesParams defines parameters for RemoveRolePrivileges.
type RemoveRolePrivilegesParams struct {
	INFASESSIONID HeaderSession `json:"INFA-SESSION-ID"`
}

// </editor-fold> //////////////////////////////////////////////////////////////

// <editor-fold desc="request-bodies" defaultstate="collapsed"> ////////////////

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequestBody

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = CreateRoleRequestBody

// AddRolePrivilegesJSONRequestBody defines body for AddRolePrivileges for application/json ContentType.
type AddRolePrivilegesJSONRequestBody = WithPrivilegeRefs

// RemoveRolePrivilegesJSONRequestBody defines body for RemoveRolePrivileges for application/json ContentType.
type RemoveRolePrivilegesJSONRequestBody = WithPrivilegeRefs

// </editor-fold> //////////////////////////////////////////////////////////////

// <editor-fold desc="client" defaultstate="collapsed"> ////////////////////////

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	common.ClientConfig
}

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...common.ClientOption) (*Client, error) {
	config, err := common.NewClientConfig(server, opts...)
	return &Client{*config}, err
}

var _ common.Client = &Client{}

func (c *Client) Config() *common.ClientConfig {
	return &c.ClientConfig
}

// The interface specification for the client above.
type ClientInterface interface {
	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error)

	// GetRoles request
	GetRoles(ctx context.Context, params *GetRolesParams, editors ...common.ClientConfigEditor) (*http.Response, error)

	// CreateRoleWithBody request with any body
	CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error)

	CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error)

	// DeleteRole request
	DeleteRole(ctx context.Context, roleRef PathRole, params *DeleteRoleParams, editors ...common.ClientConfigEditor) (*http.Response, error)

	// AddRolePrivilegesWithBody request with any body
	AddRolePrivilegesWithBody(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error)

	AddRolePrivileges(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, body AddRolePrivilegesJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error)

	// RemoveRolePrivilegesWithBody request with any body
	RemoveRolePrivilegesWithBody(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error)

	RemoveRolePrivileges(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, body RemoveRolePrivilegesJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewLoginRequestWithBody(c.Server, contentType, body)
	})
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewLoginRequest(c.Server, body)
	})
}

func (c *Client) GetRoles(ctx context.Context, params *GetRolesParams, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewGetRolesRequest(c.Server, params)
	})
}

func (c *Client) CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewCreateRoleRequestWithBody(c.Server, contentType, body)
	})
}

func (c *Client) CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewCreateRoleRequest(c.Server, body)
	})
}

func (c *Client) DeleteRole(ctx context.Context, roleRef PathRole, params *DeleteRoleParams, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewDeleteRoleRequest(c.Server, roleRef, params)
	})
}

func (c *Client) AddRolePrivilegesWithBody(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewAddRolePrivilegesRequestWithBody(c.Server, roleRef, params, contentType, body)
	})
}

func (c *Client) AddRolePrivileges(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, body AddRolePrivilegesJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewAddRolePrivilegesRequest(c.Server, roleRef, params, body)
	})
}

func (c *Client) RemoveRolePrivilegesWithBody(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewRemoveRolePrivilegesRequestWithBody(c.Server, roleRef, params, contentType, body)
	})
}

func (c *Client) RemoveRolePrivileges(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, body RemoveRolePrivilegesJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewRemoveRolePrivilegesRequest(c.Server, roleRef, params, body)
	})
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/core/v3/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRolesRequest generates requests for GetRoles
func NewGetRolesRequest(server string, params *GetRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/core/v3/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "INFA-SESSION-ID", runtime.ParamLocationHeader, params.INFASESSIONID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("INFA-SESSION-ID", headerParam0)

	}

	return req, nil
}

// NewCreateRoleRequest calls the generic CreateRole builder with application/json body
func NewCreateRoleRequest(server string, body CreateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRoleRequestWithBody generates requests for CreateRole with any type of body
func NewCreateRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/core/v3/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleRequest generates requests for DeleteRole
func NewDeleteRoleRequest(server string, roleRef PathRole, params *DeleteRoleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_ref", runtime.ParamLocationPath, roleRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/core/v3/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "INFA-SESSION-ID", runtime.ParamLocationHeader, params.INFASESSIONID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("INFA-SESSION-ID", headerParam0)

	}

	return req, nil
}

// NewAddRolePrivilegesRequest calls the generic AddRolePrivileges builder with application/json body
func NewAddRolePrivilegesRequest(server string, roleRef PathRole, params *AddRolePrivilegesParams, body AddRolePrivilegesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRolePrivilegesRequestWithBody(server, roleRef, params, "application/json", bodyReader)
}

// NewAddRolePrivilegesRequestWithBody generates requests for AddRolePrivileges with any type of body
func NewAddRolePrivilegesRequestWithBody(server string, roleRef PathRole, params *AddRolePrivilegesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_ref", runtime.ParamLocationPath, roleRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/core/v3/roles/%s/addPrivileges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "INFA-SESSION-ID", runtime.ParamLocationHeader, params.INFASESSIONID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("INFA-SESSION-ID", headerParam0)

	}

	return req, nil
}

// NewRemoveRolePrivilegesRequest calls the generic RemoveRolePrivileges builder with application/json body
func NewRemoveRolePrivilegesRequest(server string, roleRef PathRole, params *RemoveRolePrivilegesParams, body RemoveRolePrivilegesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveRolePrivilegesRequestWithBody(server, roleRef, params, "application/json", bodyReader)
}

// NewRemoveRolePrivilegesRequestWithBody generates requests for RemoveRolePrivileges with any type of body
func NewRemoveRolePrivilegesRequestWithBody(server string, roleRef PathRole, params *RemoveRolePrivilegesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_ref", runtime.ParamLocationPath, roleRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/core/v3/roles/%s/removePrivileges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "INFA-SESSION-ID", runtime.ParamLocationHeader, params.INFASESSIONID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("INFA-SESSION-ID", headerParam0)

	}

	return req, nil
}

// </editor-fold> //////////////////////////////////////////////////////////////
// <editor-fold desc="client-with-responses" defaultstate="collapsed"> /////////

// ClientWithResponses builds on Client to offer response payloads
type ClientWithResponses struct {
	*Client
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...common.ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, editors ...common.ClientConfigEditor) (*LoginResponse, error)

	// GetRolesWithResponse request
	GetRolesWithResponse(ctx context.Context, params *GetRolesParams, editors ...common.ClientConfigEditor) (*GetRolesResponse, error)

	// CreateRoleWithBodyWithResponse request with any body
	CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*CreateRoleResponse, error)

	CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, editors ...common.ClientConfigEditor) (*CreateRoleResponse, error)

	// DeleteRoleWithResponse request
	DeleteRoleWithResponse(ctx context.Context, roleRef PathRole, params *DeleteRoleParams, editors ...common.ClientConfigEditor) (*DeleteRoleResponse, error)

	// AddRolePrivilegesWithBodyWithResponse request with any body
	AddRolePrivilegesWithBodyWithResponse(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*AddRolePrivilegesResponse, error)

	AddRolePrivilegesWithResponse(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, body AddRolePrivilegesJSONRequestBody, editors ...common.ClientConfigEditor) (*AddRolePrivilegesResponse, error)

	// RemoveRolePrivilegesWithBodyWithResponse request with any body
	RemoveRolePrivilegesWithBodyWithResponse(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*RemoveRolePrivilegesResponse, error)

	RemoveRolePrivilegesWithResponse(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, body RemoveRolePrivilegesJSONRequestBody, editors ...common.ClientConfigEditor) (*RemoveRolePrivilegesResponse, error)
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponseBody
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
	JSON502      *N502
	JSON503      *N503
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r LoginResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r LoginResponse) BodyData() []byte {
	return r.Body
}

type GetRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetRolesResponseBody
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
	JSON502      *N502
	JSON503      *N503
}

// Status returns HTTPResponse.Status
func (r GetRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r GetRolesResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r GetRolesResponse) BodyData() []byte {
	return r.Body
}

type CreateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateRoleResponseBody
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
	JSON502      *N502
	JSON503      *N503
}

// Status returns HTTPResponse.Status
func (r CreateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r CreateRoleResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r CreateRoleResponse) BodyData() []byte {
	return r.Body
}

type DeleteRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
	JSON502      *N502
	JSON503      *N503
}

// Status returns HTTPResponse.Status
func (r DeleteRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r DeleteRoleResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r DeleteRoleResponse) BodyData() []byte {
	return r.Body
}

type AddRolePrivilegesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
	JSON502      *N502
	JSON503      *N503
}

// Status returns HTTPResponse.Status
func (r AddRolePrivilegesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRolePrivilegesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r AddRolePrivilegesResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r AddRolePrivilegesResponse) BodyData() []byte {
	return r.Body
}

type RemoveRolePrivilegesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400
	JSON401      *N401
	JSON403      *N403
	JSON404      *N404
	JSON500      *N500
	JSON502      *N502
	JSON503      *N503
}

// Status returns HTTPResponse.Status
func (r RemoveRolePrivilegesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveRolePrivilegesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r RemoveRolePrivilegesResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r RemoveRolePrivilegesResponse) BodyData() []byte {
	return r.Body
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseLoginResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, editors ...common.ClientConfigEditor) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseLoginResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// GetRolesWithResponse request returning *GetRolesResponse
func (c *ClientWithResponses) GetRolesWithResponse(ctx context.Context, params *GetRolesParams, editors ...common.ClientConfigEditor) (*GetRolesResponse, error) {
	rsp, err := c.GetRoles(ctx, params, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseGetRolesResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// CreateRoleWithBodyWithResponse request with arbitrary body returning *CreateRoleResponse
func (c *ClientWithResponses) CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRoleWithBody(ctx, contentType, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseCreateRoleResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

func (c *ClientWithResponses) CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, editors ...common.ClientConfigEditor) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRole(ctx, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseCreateRoleResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// DeleteRoleWithResponse request returning *DeleteRoleResponse
func (c *ClientWithResponses) DeleteRoleWithResponse(ctx context.Context, roleRef PathRole, params *DeleteRoleParams, editors ...common.ClientConfigEditor) (*DeleteRoleResponse, error) {
	rsp, err := c.DeleteRole(ctx, roleRef, params, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseDeleteRoleResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// AddRolePrivilegesWithBodyWithResponse request with arbitrary body returning *AddRolePrivilegesResponse
func (c *ClientWithResponses) AddRolePrivilegesWithBodyWithResponse(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*AddRolePrivilegesResponse, error) {
	rsp, err := c.AddRolePrivilegesWithBody(ctx, roleRef, params, contentType, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseAddRolePrivilegesResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

func (c *ClientWithResponses) AddRolePrivilegesWithResponse(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, body AddRolePrivilegesJSONRequestBody, editors ...common.ClientConfigEditor) (*AddRolePrivilegesResponse, error) {
	rsp, err := c.AddRolePrivileges(ctx, roleRef, params, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseAddRolePrivilegesResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// RemoveRolePrivilegesWithBodyWithResponse request with arbitrary body returning *RemoveRolePrivilegesResponse
func (c *ClientWithResponses) RemoveRolePrivilegesWithBodyWithResponse(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*RemoveRolePrivilegesResponse, error) {
	rsp, err := c.RemoveRolePrivilegesWithBody(ctx, roleRef, params, contentType, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseRemoveRolePrivilegesResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

func (c *ClientWithResponses) RemoveRolePrivilegesWithResponse(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, body RemoveRolePrivilegesJSONRequestBody, editors ...common.ClientConfigEditor) (*RemoveRolePrivilegesResponse, error) {
	rsp, err := c.RemoveRolePrivileges(ctx, roleRef, params, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseRemoveRolePrivilegesResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest N502
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetRolesResponse parses an HTTP response from a GetRolesWithResponse call
func ParseGetRolesResponse(rsp *http.Response) (*GetRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetRolesResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest N502
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseCreateRoleResponse parses an HTTP response from a CreateRoleWithResponse call
func ParseCreateRoleResponse(rsp *http.Response) (*CreateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateRoleResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest N502
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteRoleResponse parses an HTTP response from a DeleteRoleWithResponse call
func ParseDeleteRoleResponse(rsp *http.Response) (*DeleteRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest N502
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseAddRolePrivilegesResponse parses an HTTP response from a AddRolePrivilegesWithResponse call
func ParseAddRolePrivilegesResponse(rsp *http.Response) (*AddRolePrivilegesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRolePrivilegesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest N502
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseRemoveRolePrivilegesResponse parses an HTTP response from a RemoveRolePrivilegesWithResponse call
func ParseRemoveRolePrivilegesResponse(rsp *http.Response) (*RemoveRolePrivilegesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveRolePrivilegesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest N502
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// </editor-fold> //////////////////////////////////////////////////////////////
