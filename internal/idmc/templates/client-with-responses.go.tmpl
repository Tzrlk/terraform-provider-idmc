// <editor-fold desc="client-with-responses" defaultstate="collapsed"> /////////

{{$clientTypeName := opts.OutputOptions.ClientTypeName -}}

// {{ $clientTypeName }}WithResponses builds on {{ $clientTypeName }} to offer response payloads
type {{ $clientTypeName }}WithResponses struct {
	*{{ $clientTypeName }}
}

// New{{ $clientTypeName }}WithResponses creates a new {{ $clientTypeName }}WithResponses, which wraps
// Client with return type handling
func New{{ $clientTypeName }}WithResponses(server string, opts ...common.ClientOption) (*{{ $clientTypeName }}WithResponses, error) {
	client, err := New{{ $clientTypeName }}(server, opts...)
	if err != nil {
		return nil, err
	}
	return &{{ $clientTypeName }}WithResponses{client}, nil
}

// {{ $clientTypeName }}WithResponsesInterface is the interface specification for the client with responses above.
type {{ $clientTypeName }}WithResponsesInterface interface {
{{range . -}}
{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$opid := .OperationId -}}
	// {{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse request{{if .HasBody}} with any body{{end}}
	{{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse(ctx context.Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params *{{$opid}}Params{{end}}{{if .HasBody}}, contentType string, body io.Reader{{end}}, editors ...common.ClientConfigEditor) (*{{genResponseTypeName $opid}}, error)
{{range .Bodies}}
	{{if .IsSupportedByClient -}}
		{{$opid}}{{.Suffix}}WithResponse(ctx context.Context{{genParamArgs $pathParams}}{{if $hasParams}}, params *{{$opid}}Params{{end}}, body {{$opid}}{{.NameTag}}RequestBody, editors ...common.ClientConfigEditor) (*{{genResponseTypeName $opid}}, error)
	{{end -}}
{{end}}{{/* range .Bodies */}}
{{end}}{{/* range . $opid := .OperationId */}}
}

{{range .}}{{$opid := .OperationId}}{{$op := .}}
type {{genResponseTypeName $opid | ucFirst}} struct {
	common.ClientResponse
	{{- range getResponseTypeDefinitions .}}
	{{.TypeName}} *{{.Schema.TypeDecl}}
	{{- end}}
}

// Status returns HTTPResponse.Status
func (r {{genResponseTypeName $opid | ucFirst}}) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r {{genResponseTypeName $opid | ucFirst}}) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r {{genResponseTypeName $opid | ucFirst}}) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r {{genResponseTypeName $opid | ucFirst}}) BodyData() []byte {
	return r.Body
}

{{end}}


{{range .}}
{{$opid := .OperationId -}}
{{/* Generate client methods (with responses)*/}}

// {{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse request{{if .HasBody}} with arbitrary body{{end}} returning *{{genResponseTypeName $opid}}
func (c *{{ $clientTypeName }}WithResponses) {{$opid}}{{if .HasBody}}WithBody{{end}}WithResponse(ctx context.Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params *{{$opid}}Params{{end}}{{if .HasBody}}, contentType string, body io.Reader{{end}}, editors... common.ClientConfigEditor) (*{{genResponseTypeName $opid}}, error){
	rsp, err := c.{{$opid}}{{if .HasBody}}WithBody{{end}}(ctx{{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}}{{if .HasBody}}, contentType, body{{end}}, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := Parse{{genResponseTypeName $opid | ucFirst}}(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, &apiRes.ClientResponse); err != nil {
		return nil, err
	}
	return apiRes, nil
}

{{$hasParams := .RequiresParamObject -}}
{{$pathParams := .PathParams -}}
{{$bodyRequired := .BodyRequired -}}
{{range .Bodies}}
{{if .IsSupportedByClient -}}
func (c *{{ $clientTypeName }}WithResponses) {{$opid}}{{.Suffix}}WithResponse(ctx context.Context{{genParamArgs $pathParams}}{{if $hasParams}}, params *{{$opid}}Params{{end}}, body {{$opid}}{{.NameTag}}RequestBody, editors ...common.ClientConfigEditor) (*{{genResponseTypeName $opid}}, error) {
	rsp, err := c.{{$opid}}{{.Suffix}}(ctx{{genParamNames $pathParams}}{{if $hasParams}}, params{{end}}, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := Parse{{genResponseTypeName $opid | ucFirst}}(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, &apiRes.ClientResponse); err != nil {
		return nil, err
	}
	return apiRes, nil
}
{{end}}
{{end}}

{{end}}{{/* operations */}}

{{/* Generate parse functions for responses*/}}
{{range .}}{{$opid := .OperationId}}

// Parse{{genResponseTypeName $opid | ucFirst}} parses an HTTP response from a {{$opid}}WithResponse call
func Parse{{genResponseTypeName $opid | ucFirst}}(rsp *http.Response) (*{{genResponseTypeName $opid}}, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &{{genResponseTypeName $opid}}{
		ClientResponse: common.ClientResponse{
			Body:         bodyBytes,
			HTTPResponse: rsp,
		},
	}

	{{genResponseUnmarshal .}}

	return response, nil
}
{{end}}{{/* range . $opid := .OperationId */}}

// </editor-fold> //////////////////////////////////////////////////////////////
