// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Type *string `json:"@type,omitempty"`

	// Password Informatica Intelligent Cloud Services password.
	// Maximum length is 255 characters.
	Password string `json:"password"`

	// Username Informatica Intelligent Cloud Services user name for the organization that you
	// want to log in to.
	// Maximum length is 255 characters.
	Username string `json:"username"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ma/api/v2/user/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// CreateTime When the user account was created.
		CreateTime *string `json:"createTime,omitempty"`

		// CreatedBy Informatica Intelligent Cloud Services user who created the user account.
		CreatedBy *string `json:"createdBy,omitempty"`

		// Description Description of the user.
		Description *string `json:"description,omitempty"`

		// Emails Email address to be notified when the user changes the account password.
		Emails *string `json:"emails,omitempty"`

		// FirstName First name for the user account.
		FirstName *string `json:"firstName,omitempty"`

		// ForceChangePassword Determines if the user must reset the password after the user logs in for the first time. Includes the following values:
		// True. The user must reset the password.
		// False. The user is not forced to reset the password.
		ForceChangePassword *bool `json:"forceChangePassword,omitempty"`

		// IcSessionId Informatica Intelligent Cloud Services session ID for version 2 REST API session.
		// Use in most version 2 REST API request headers.
		IcSessionId *string `json:"icSessionId,omitempty"`

		// Id User ID.
		Id *string `json:"id,omitempty"`

		// LastName Last name for the user account.
		LastName *string `json:"lastName,omitempty"`

		// Name Informatica Intelligent Cloud Services user name.
		Name *string `json:"name,omitempty"`

		// OrgId ID of the organization the user belongs to. 22 characters.
		// NOTE: Organizations that were created in legacy Informatica Cloud might have an
		// organization ID of 6 characters.
		OrgId *string `json:"orgId,omitempty"`

		// OrgUuid Unique identifier for the organization.
		OrgUuid *string `json:"orgUuid,omitempty"`

		// Password Salesforce user password. Included when user is configured to authenticate through Salesforce.
		Password *string `json:"password,omitempty"`

		// Phone Phone number for the user.
		Phone *string `json:"phone,omitempty"`

		// Roles Object that includes a role object for each role assigned to the user.
		Roles *struct {
			// Description Role description.
			Description *string `json:"description,omitempty"`

			// Name Role name. Returns one of the following codes:
			// Service Consumer
			// Designer
			// Admin
			Name *string `json:"name,omitempty"`
		} `json:"roles,omitempty"`

		// SecurityAnswer Answer to the security question.
		SecurityAnswer *string `json:"securityAnswer,omitempty"`

		// SecurityQuestion Security question. Returns one of the following codes:
		// SPOUSE_MEETING_CITY
		// FIRST_JOB_CITY
		// CHILDHOOD_FRIEND
		// MOTHER_MAIDEN_NAME
		// PET_NAME
		// CHILDHOOD_NICKNAME
		// CUSTOM_QUESTION:"<question>"
		SecurityQuestion *string `json:"securityQuestion,omitempty"`

		// ServerUrl Informatica Intelligent Cloud Services URL for the organization the user belongs
		// to. Use the serverUrl as a base for most version 2 REST API resource URIs.
		ServerUrl *string `json:"serverUrl,omitempty"`

		// SfUsername Salesforce user name. Included when user is configured to authenticate through Salesforce.
		SfUsername *string `json:"sfUsername,omitempty"`

		// SpiUrl This field is no longer applicable and has been deprecated.
		// Deprecated:
		SpiUrl *string `json:"spiUrl,omitempty"`

		// Timezone Time zone of the user. Time zone honors Daylight Saving Time.
		// For more information, see Time zone codes.
		Timezone *string `json:"timezone,omitempty"`

		// Title Title of the user.
		Title *string `json:"title,omitempty"`

		// UpdateTime When the user account was last updated.
		UpdateTime *string `json:"updateTime,omitempty"`

		// UpdatedBy Informatica Intelligent Cloud Services user who last updated the user account.
		UpdatedBy *string `json:"updatedBy,omitempty"`

		// UuId Unique identifier for the user.
		UuId *string `json:"uuId,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// CreateTime When the user account was created.
			CreateTime *string `json:"createTime,omitempty"`

			// CreatedBy Informatica Intelligent Cloud Services user who created the user account.
			CreatedBy *string `json:"createdBy,omitempty"`

			// Description Description of the user.
			Description *string `json:"description,omitempty"`

			// Emails Email address to be notified when the user changes the account password.
			Emails *string `json:"emails,omitempty"`

			// FirstName First name for the user account.
			FirstName *string `json:"firstName,omitempty"`

			// ForceChangePassword Determines if the user must reset the password after the user logs in for the first time. Includes the following values:
			// True. The user must reset the password.
			// False. The user is not forced to reset the password.
			ForceChangePassword *bool `json:"forceChangePassword,omitempty"`

			// IcSessionId Informatica Intelligent Cloud Services session ID for version 2 REST API session.
			// Use in most version 2 REST API request headers.
			IcSessionId *string `json:"icSessionId,omitempty"`

			// Id User ID.
			Id *string `json:"id,omitempty"`

			// LastName Last name for the user account.
			LastName *string `json:"lastName,omitempty"`

			// Name Informatica Intelligent Cloud Services user name.
			Name *string `json:"name,omitempty"`

			// OrgId ID of the organization the user belongs to. 22 characters.
			// NOTE: Organizations that were created in legacy Informatica Cloud might have an
			// organization ID of 6 characters.
			OrgId *string `json:"orgId,omitempty"`

			// OrgUuid Unique identifier for the organization.
			OrgUuid *string `json:"orgUuid,omitempty"`

			// Password Salesforce user password. Included when user is configured to authenticate through Salesforce.
			Password *string `json:"password,omitempty"`

			// Phone Phone number for the user.
			Phone *string `json:"phone,omitempty"`

			// Roles Object that includes a role object for each role assigned to the user.
			Roles *struct {
				// Description Role description.
				Description *string `json:"description,omitempty"`

				// Name Role name. Returns one of the following codes:
				// Service Consumer
				// Designer
				// Admin
				Name *string `json:"name,omitempty"`
			} `json:"roles,omitempty"`

			// SecurityAnswer Answer to the security question.
			SecurityAnswer *string `json:"securityAnswer,omitempty"`

			// SecurityQuestion Security question. Returns one of the following codes:
			// SPOUSE_MEETING_CITY
			// FIRST_JOB_CITY
			// CHILDHOOD_FRIEND
			// MOTHER_MAIDEN_NAME
			// PET_NAME
			// CHILDHOOD_NICKNAME
			// CUSTOM_QUESTION:"<question>"
			SecurityQuestion *string `json:"securityQuestion,omitempty"`

			// ServerUrl Informatica Intelligent Cloud Services URL for the organization the user belongs
			// to. Use the serverUrl as a base for most version 2 REST API resource URIs.
			ServerUrl *string `json:"serverUrl,omitempty"`

			// SfUsername Salesforce user name. Included when user is configured to authenticate through Salesforce.
			SfUsername *string `json:"sfUsername,omitempty"`

			// SpiUrl This field is no longer applicable and has been deprecated.
			// Deprecated:
			SpiUrl *string `json:"spiUrl,omitempty"`

			// Timezone Time zone of the user. Time zone honors Daylight Saving Time.
			// For more information, see Time zone codes.
			Timezone *string `json:"timezone,omitempty"`

			// Title Title of the user.
			Title *string `json:"title,omitempty"`

			// UpdateTime When the user account was last updated.
			UpdateTime *string `json:"updateTime,omitempty"`

			// UpdatedBy Informatica Intelligent Cloud Services user who last updated the user account.
			UpdatedBy *string `json:"updatedBy,omitempty"`

			// UuId Unique identifier for the user.
			UuId *string `json:"uuId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXW3PayBL+K13z7MIuUjkPPB0H8InOGnC41NbWaosapJY0qVGPMhdYkuK/b81IAmyL",
	"OHayT6BRT1++7v669Y0lqqwUIVnDBt8OV0xQptjgG7PCSmQDdpuWguD2IYJMaYhGkyG7YlvURihiA9bv",
	"3fRu2OGKqQqJV4IN2LtwdMUqbguvlF2X/JpX4nrbv3YG9bVUuSD/olLG+l9VoeZWKIpSNmD34fUV0/jF",
	"obEfVLr3QokiixTkeVVJkYQb15+NCrpMUmDJg1bt9VmBwfh/7b5C/yfFjDtp2YDJxkD9hhmrBeU+hoob",
	"s1M6rcVNokVl6zAjypQuuRUJh4gsSilyJAtDqVwKC9RbkaCBVkEvpgn/W5SuBImU2wKEgf7795AUXPPE",
	"oja9Lgc8PMRLfLMDXgF4DSFbtkBQOuckvgawwBbcwl65mHacLFgFUuUgCKx6m8uHOk1CY8oGf578P8Py",
	"r+MltfmMiWWHQ33NVIpMnaT+zc1PpDjRyC0uRRduvxdIAYeADE8S5cjCjhuob6WdeWjefdj/XCJ2hWrN",
	"PPOh0+4jU08tj05PoLKjwk5FWHIhzXMdY38OPE01GuPzv0EgZUUmMIXdI6ySglOOJhy0uB3ru8tmJrSx",
	"087qvfOvHtfli1hkSic4DE48XOzLEVrUpSA0IE6QQOmMBY0GbThr3QaeWTwzL1VufPW3PoUIwIoSexBR",
	"Il3axJ8pKdVOUA5bLh2aQUxL7bAHyxcs9mK649KcSwrjEYcQXupT0HHrhMdGKYmcPCAiWaAxDUu+sSxN",
	"rQGiUQi64XHow3y8WAaWbyR6Ma0MenBKZWyXYEPPUCBPL/GZ6PB05UGIRp3ykl+qoHv+6gL6NUTaqVrp",
	"vDMJo7Yxn7Bu4+0GpaLc910P+v1zZo1pOluOBzA7u2dqut6hxiOLCAKJOU/2cB5H7Xsp8sJCwbcInGJ6",
	"5ELt2X9emj9K5yvXmTQSXxyCSJECWejO+dJ73VBdcIkm9EENz7H82+ZrKKltm0RRJnKn67bhzhbem4Rb",
	"BFto5fICTiq7fSkUddTEgz8GcuXmLLCL3KqVxA5qnYXpVudMtOTBwUtDPfmCauRJUR9yY0ROdTDnBh8P",
	"t++OhLnXc3b0ij4IV0OBwxyt02TAg9DU74nwEpUGvms6A4aKjCtRxzTC4L+OKeyIncvBk8l/xQwmTgu7",
	"vyWzQ/3crfq8haSVhkA1lwJspT41Qh2V9kzPDwb9MFstxuvJeLyMpv9bD6PlHzHdRfPFcv3/2Yfmefgx",
	"uh99nM1G67t5NJ6OYprMlh/H8/XkNhqNp+vp7WQc08N42fw7yU+j4W/N2WqxnE3Wn1bjxTKaTQcxi93N",
	"zbuk9Tc8Ycy6w9db1Cst30x2q/n9pX3xMXPF5KnLD4Y6O41h4L7SN9zU7Hx5YhjlfLev5lE3/5hsdXED",
	"fsoWde3+W0xhKnFEtNLor6ZsYLXDJ1saWxbCQCZQpvVoB4+UH031BrvxnU4pFNzABpHgpK/TsN8+vnay",
	"lF9w4etZvQbCgNNxoUhpAyO+l2EULPjWF7MX8HtIyIz2M70pCkVXYBDPNIS6v+BW+Bx87pOV+OI26qr0",
	"DQu6Xwagvpp+R+0v2dLPbf3YduFc9Ko5eQGcQ8fX0dMKa6nq6FczTpqNt13EhAHjkgSNyZzshc+sw+Gf",
	"AAAA//90B9vJ4Q8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
