// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// GetAgentInstallerInfoResponseBody defines model for getAgentInstallerInfoResponseBody.
type GetAgentInstallerInfoResponseBody struct {
	Type                *string `json:"@type,omitempty"`
	ChecksumDownloadUrl *string `json:"checksumDownloadUrl,omitempty"`
	DownloadUrl         *string `json:"downloadUrl,omitempty"`
	InstallToken        *string `json:"installToken,omitempty"`
}

// LoginRequestBody defines model for loginRequestBody.
type LoginRequestBody struct {
	Type *string `json:"@type,omitempty"`

	// Password Informatica Intelligent Cloud Services password.
	Password string `json:"password"`

	// Username Informatica Intelligent Cloud Services user name for the organization that you want to log in to.
	Username string `json:"username"`
}

// LoginResponseBody defines model for loginResponseBody.
type LoginResponseBody struct {
	// CreateTime When the user account was created.
	CreateTime *string `json:"createTime,omitempty"`

	// CreatedBy Informatica Intelligent Cloud Services user who created the user account.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description Description of the user.
	Description *string `json:"description,omitempty"`

	// Emails Email address to be notified when the user changes the account password.
	Emails *string `json:"emails,omitempty"`

	// FirstName First name for the user account.
	FirstName *string `json:"firstName,omitempty"`

	// ForceChangePassword Determines if the user must reset the password after the user logs in for the first time. Includes the following values:
	// True. The user must reset the password.
	// False. The user is not forced to reset the password.
	ForceChangePassword *bool `json:"forceChangePassword,omitempty"`

	// IcSessionId Informatica Intelligent Cloud Services session ID for version 2 REST API session.
	// Use in most version 2 REST API request headers.
	IcSessionId *string `json:"icSessionId,omitempty"`

	// Id User ID.
	Id *string `json:"id,omitempty"`

	// LastName Last name for the user account.
	LastName *string `json:"lastName,omitempty"`

	// Name Informatica Intelligent Cloud Services user name.
	Name *string `json:"name,omitempty"`

	// OrgId ID of the organization the user belongs to. 22 characters.
	// NOTE: Organizations that were created in legacy Informatica Cloud might have an
	// organization ID of 6 characters.
	OrgId *string `json:"orgId,omitempty"`

	// OrgUuid Unique identifier for the organization.
	OrgUuid *string `json:"orgUuid,omitempty"`

	// Password Salesforce user password. Included when user is configured to authenticate through Salesforce.
	Password *string `json:"password,omitempty"`

	// Phone Phone number for the user.
	Phone *string `json:"phone,omitempty"`

	// Roles Object that includes a role object for each role assigned to the user.
	Roles *struct {
		// Description Role description.
		Description *string `json:"description,omitempty"`

		// Name Role name. Returns one of the following codes:
		// Service Consumer
		// Designer
		// Admin
		Name *string `json:"name,omitempty"`
	} `json:"roles,omitempty"`

	// SecurityAnswer Answer to the security question.
	SecurityAnswer *string `json:"securityAnswer,omitempty"`

	// SecurityQuestion Security question. Returns one of the following codes:
	// SPOUSE_MEETING_CITY
	// FIRST_JOB_CITY
	// CHILDHOOD_FRIEND
	// MOTHER_MAIDEN_NAME
	// PET_NAME
	// CHILDHOOD_NICKNAME
	// CUSTOM_QUESTION:"<question>"
	SecurityQuestion *string `json:"securityQuestion,omitempty"`

	// ServerUrl Informatica Intelligent Cloud Services URL for the organization the user belongs
	// to. Use the serverUrl as a base for most version 2 REST API resource URIs.
	ServerUrl *string `json:"serverUrl,omitempty"`

	// SfUsername Salesforce user name. Included when user is configured to authenticate through Salesforce.
	SfUsername *string `json:"sfUsername,omitempty"`

	// SpiUrl This field is no longer applicable and has been deprecated.
	// Deprecated:
	SpiUrl *string `json:"spiUrl,omitempty"`

	// Timezone Time zone of the user. Time zone honors Daylight Saving Time.
	// For more information, see Time zone codes.
	Timezone *string `json:"timezone,omitempty"`

	// Title Title of the user.
	Title *string `json:"title,omitempty"`

	// UpdateTime When the user account was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`

	// UpdatedBy Informatica Intelligent Cloud Services user who last updated the user account.
	UpdatedBy *string `json:"updatedBy,omitempty"`

	// UuId Unique identifier for the user.
	UuId *string `json:"uuId,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequestBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAgentInstallerInfo request
	GetAgentInstallerInfo(ctx context.Context, platform string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAgentInstallerInfo(ctx context.Context, platform string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentInstallerInfoRequest(c.Server, platform)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAgentInstallerInfoRequest generates requests for GetAgentInstallerInfo
func NewGetAgentInstallerInfoRequest(server string, platform string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform", runtime.ParamLocationPath, platform)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/agent/installerInfo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ma/api/v2/user/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAgentInstallerInfoWithResponse request
	GetAgentInstallerInfoWithResponse(ctx context.Context, platform string, reqEditors ...RequestEditorFn) (*GetAgentInstallerInfoResponse, error)

	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)
}

type GetAgentInstallerInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAgentInstallerInfoResponseBody
}

// Status returns HTTPResponse.Status
func (r GetAgentInstallerInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentInstallerInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponseBody
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAgentInstallerInfoWithResponse request returning *GetAgentInstallerInfoResponse
func (c *ClientWithResponses) GetAgentInstallerInfoWithResponse(ctx context.Context, platform string, reqEditors ...RequestEditorFn) (*GetAgentInstallerInfoResponse, error) {
	rsp, err := c.GetAgentInstallerInfo(ctx, platform, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentInstallerInfoResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// ParseGetAgentInstallerInfoResponse parses an HTTP response from a GetAgentInstallerInfoWithResponse call
func ParseGetAgentInstallerInfoResponse(rsp *http.Response) (*GetAgentInstallerInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentInstallerInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAgentInstallerInfoResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"iM0dtk0I0500BWy3278DAAD//5lmEs2jEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
