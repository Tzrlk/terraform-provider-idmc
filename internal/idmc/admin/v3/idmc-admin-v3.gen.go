// Package v3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v3

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// RoleInfo defines model for roleInfo.
type RoleInfo struct {
	// CreateTime Date and time the role was created.
	CreateTime *string `json:"createTime,omitempty"`

	// CreatedBy User who created the role.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description Description of the role.
	Description *string `json:"description,omitempty"`

	// DisplayDescription Description displayed in the user interface.
	DisplayDescription *string `json:"displayDescription,omitempty"`

	// DisplayName Role name displayed in the user interface.
	DisplayName *string `json:"displayName,omitempty"`

	// Id Role ID.
	Id *string `json:"id,omitempty"`

	// OrgId ID of the organization the role belongs to.
	OrgId *string `json:"orgId,omitempty"`

	// RoleName Name of the role.
	RoleName *string `json:"roleName,omitempty"`

	// Status Whether the organization's license to use the role is valid or has expired.
	Status *string `json:"status,omitempty"`

	// SystemRole Whether the role is a system-defined role.
	SystemRole *bool `json:"systemRole,omitempty"`

	// UpdateTime Date and time the role was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`

	// UpdatedBy User who last updated the role.
	UpdatedBy *string `json:"updatedBy,omitempty"`
}

// WithPrivilegeItems defines model for withPrivilegeItems.
type WithPrivilegeItems struct {
	Privileges *[]struct {
		// Description Description of the privilege.
		Description *string `json:"description,omitempty"`
		Id          *string `json:"id,omitempty"`

		// Name Name of the privilege.
		Name    *string `json:"name,omitempty"`
		Service *string `json:"service,omitempty"`
		Status  *string `json:"status,omitempty"`
	} `json:"privileges,omitempty"`
}

// WithPrivilegeRefs defines model for withPrivilegeRefs.
type WithPrivilegeRefs struct {
	// Privileges IDs of the privileges to assign to the role.
	// A role must have at least one privilege assigned to it.
	Privileges *[]string `json:"privileges,omitempty"`
}

// HeaderSession defines model for headerSession.
type HeaderSession = string

// PathRole defines model for pathRole.
type PathRole = string

// RolePrivileges defines model for rolePrivileges.
type RolePrivileges = WithPrivilegeRefs

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	// Password Informatica Intelligent Cloud Services password.
	Password string `json:"password"`

	// Username Informatica Intelligent Cloud Services user name for the organization that you want to log in to.
	Username string `json:"username"`
}

// GetRolesParams defines parameters for GetRoles.
type GetRolesParams struct {
	// Q Query filter. You can filter using one of the following fields:
	// * roleId. Unique identifier for the role.
	// * roleName. Name of the role.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Expand Returns the privileges associated with the role specified in the query filter.
	Expand        *string       `form:"expand,omitempty" json:"expand,omitempty"`
	INFASESSIONID HeaderSession `json:"INFA-SESSION-ID"`
}

// CreateRoleJSONBody defines parameters for CreateRole.
type CreateRoleJSONBody struct {
	// Description Description of the role.
	Description *string `json:"description,omitempty"`

	// Name Name of the role.
	Name *string `json:"name,omitempty"`

	// Privileges IDs of the privileges to assign to the role.
	// A role must have at least one privilege assigned to it.
	Privileges *[]string `json:"privileges,omitempty"`
}

// DeleteRoleParams defines parameters for DeleteRole.
type DeleteRoleParams struct {
	INFASESSIONID HeaderSession `json:"INFA-SESSION-ID"`
}

// AddRolePrivilegesParams defines parameters for AddRolePrivileges.
type AddRolePrivilegesParams struct {
	INFASESSIONID HeaderSession `json:"INFA-SESSION-ID"`
}

// RemoveRolePrivilegesParams defines parameters for RemoveRolePrivileges.
type RemoveRolePrivilegesParams struct {
	INFASESSIONID HeaderSession `json:"INFA-SESSION-ID"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody CreateRoleJSONBody

// AddRolePrivilegesJSONRequestBody defines body for AddRolePrivileges for application/json ContentType.
type AddRolePrivilegesJSONRequestBody = WithPrivilegeRefs

// RemoveRolePrivilegesJSONRequestBody defines body for RemoveRolePrivileges for application/json ContentType.
type RemoveRolePrivilegesJSONRequestBody = WithPrivilegeRefs

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoles request
	GetRoles(ctx context.Context, params *GetRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleWithBody request with any body
	CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRole request
	DeleteRole(ctx context.Context, roleRef PathRole, params *DeleteRoleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRolePrivilegesWithBody request with any body
	AddRolePrivilegesWithBody(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddRolePrivileges(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, body AddRolePrivilegesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveRolePrivilegesWithBody request with any body
	RemoveRolePrivilegesWithBody(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveRolePrivileges(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, body RemoveRolePrivilegesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoles(ctx context.Context, params *GetRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRole(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRole(ctx context.Context, roleRef PathRole, params *DeleteRoleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleRequest(c.Server, roleRef, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRolePrivilegesWithBody(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRolePrivilegesRequestWithBody(c.Server, roleRef, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRolePrivileges(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, body AddRolePrivilegesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRolePrivilegesRequest(c.Server, roleRef, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRolePrivilegesWithBody(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRolePrivilegesRequestWithBody(c.Server, roleRef, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRolePrivileges(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, body RemoveRolePrivilegesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRolePrivilegesRequest(c.Server, roleRef, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/core/v3/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRolesRequest generates requests for GetRoles
func NewGetRolesRequest(server string, params *GetRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/core/v3/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "INFA-SESSION-ID", runtime.ParamLocationHeader, params.INFASESSIONID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("INFA-SESSION-ID", headerParam0)

	}

	return req, nil
}

// NewCreateRoleRequest calls the generic CreateRole builder with application/json body
func NewCreateRoleRequest(server string, body CreateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRoleRequestWithBody generates requests for CreateRole with any type of body
func NewCreateRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/core/v3/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleRequest generates requests for DeleteRole
func NewDeleteRoleRequest(server string, roleRef PathRole, params *DeleteRoleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_ref", runtime.ParamLocationPath, roleRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/core/v3/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "INFA-SESSION-ID", runtime.ParamLocationHeader, params.INFASESSIONID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("INFA-SESSION-ID", headerParam0)

	}

	return req, nil
}

// NewAddRolePrivilegesRequest calls the generic AddRolePrivileges builder with application/json body
func NewAddRolePrivilegesRequest(server string, roleRef PathRole, params *AddRolePrivilegesParams, body AddRolePrivilegesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRolePrivilegesRequestWithBody(server, roleRef, params, "application/json", bodyReader)
}

// NewAddRolePrivilegesRequestWithBody generates requests for AddRolePrivileges with any type of body
func NewAddRolePrivilegesRequestWithBody(server string, roleRef PathRole, params *AddRolePrivilegesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_ref", runtime.ParamLocationPath, roleRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/core/v3/roles/%s/addPrivileges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "INFA-SESSION-ID", runtime.ParamLocationHeader, params.INFASESSIONID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("INFA-SESSION-ID", headerParam0)

	}

	return req, nil
}

// NewRemoveRolePrivilegesRequest calls the generic RemoveRolePrivileges builder with application/json body
func NewRemoveRolePrivilegesRequest(server string, roleRef PathRole, params *RemoveRolePrivilegesParams, body RemoveRolePrivilegesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveRolePrivilegesRequestWithBody(server, roleRef, params, "application/json", bodyReader)
}

// NewRemoveRolePrivilegesRequestWithBody generates requests for RemoveRolePrivileges with any type of body
func NewRemoveRolePrivilegesRequestWithBody(server string, roleRef PathRole, params *RemoveRolePrivilegesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role_ref", runtime.ParamLocationPath, roleRef)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/core/v3/roles/%s/removePrivileges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "INFA-SESSION-ID", runtime.ParamLocationHeader, params.INFASESSIONID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("INFA-SESSION-ID", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// GetRolesWithResponse request
	GetRolesWithResponse(ctx context.Context, params *GetRolesParams, reqEditors ...RequestEditorFn) (*GetRolesResponse, error)

	// CreateRoleWithBodyWithResponse request with any body
	CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	// DeleteRoleWithResponse request
	DeleteRoleWithResponse(ctx context.Context, roleRef PathRole, params *DeleteRoleParams, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error)

	// AddRolePrivilegesWithBodyWithResponse request with any body
	AddRolePrivilegesWithBodyWithResponse(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRolePrivilegesResponse, error)

	AddRolePrivilegesWithResponse(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, body AddRolePrivilegesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRolePrivilegesResponse, error)

	// RemoveRolePrivilegesWithBodyWithResponse request with any body
	RemoveRolePrivilegesWithBodyWithResponse(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveRolePrivilegesResponse, error)

	RemoveRolePrivilegesWithResponse(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, body RemoveRolePrivilegesJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveRolePrivilegesResponse, error)
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Products Subscribed Informatica products.
		Products *[]struct {
			// BaseApiUrl Base API URL for the product. Use in REST API requests.
			BaseApiUrl *string `json:"baseApiUrl,omitempty"`

			// Name Product name.
			Name *string `json:"name,omitempty"`
		} `json:"products,omitempty"`
		UserInfo *struct {
			// Groups User group information for the user.
			Groups *map[string]interface{} `json:"groups,omitempty"`

			// Id User ID.
			Id *string `json:"id,omitempty"`

			// Name User name.
			Name *string `json:"name,omitempty"`

			// OrgId ID of the organization the user belongs to.
			OrgId *string `json:"orgId,omitempty"`

			// OrgName Organization name.
			OrgName *string `json:"orgName,omitempty"`

			// ParentOrgId Organization ID for the parent.
			ParentOrgId *string `json:"parentOrgId,omitempty"`

			// SessionId REST API session ID for the current session. Use in most REST API request headers.
			SessionId *string `json:"sessionId,omitempty"`

			// Status Status of the user.
			Status *string `json:"status,omitempty"`
		} `json:"userInfo,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// CreateTime Date and time the role was created.
		CreateTime *string `json:"createTime,omitempty"`

		// CreatedBy User who created the role.
		CreatedBy *string `json:"createdBy,omitempty"`

		// Description Description of the role.
		Description *string `json:"description,omitempty"`

		// DisplayDescription Description displayed in the user interface.
		DisplayDescription *string `json:"displayDescription,omitempty"`

		// DisplayName Role name displayed in the user interface.
		DisplayName *string `json:"displayName,omitempty"`

		// Id Role ID.
		Id *string `json:"id,omitempty"`

		// OrgId ID of the organization the role belongs to.
		OrgId      *string `json:"orgId,omitempty"`
		Privileges *[]struct {
			// Description Description of the privilege.
			Description *string `json:"description,omitempty"`
			Id          *string `json:"id,omitempty"`

			// Name Name of the privilege.
			Name    *string `json:"name,omitempty"`
			Service *string `json:"service,omitempty"`
			Status  *string `json:"status,omitempty"`
		} `json:"privileges,omitempty"`

		// RoleName Name of the role.
		RoleName *string `json:"roleName,omitempty"`

		// Status Whether the organization's license to use the role is valid or has expired.
		Status *string `json:"status,omitempty"`

		// SystemRole Whether the role is a system-defined role.
		SystemRole *bool `json:"systemRole,omitempty"`

		// UpdateTime Date and time the role was last updated.
		UpdateTime *string `json:"updateTime,omitempty"`

		// UpdatedBy User who last updated the role.
		UpdatedBy *string `json:"updatedBy,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// CreateTime Date and time the role was created.
		CreateTime *string `json:"createTime,omitempty"`

		// CreatedBy User who created the role.
		CreatedBy *string `json:"createdBy,omitempty"`

		// Description Description of the role.
		Description *string `json:"description,omitempty"`

		// DisplayDescription Description displayed in the user interface.
		DisplayDescription *string `json:"displayDescription,omitempty"`

		// DisplayName Role name displayed in the user interface.
		DisplayName *string `json:"displayName,omitempty"`

		// Id Role ID.
		Id *string `json:"id,omitempty"`

		// OrgId ID of the organization the role belongs to.
		OrgId      *string `json:"orgId,omitempty"`
		Privileges *[]struct {
			// Description Description of the privilege.
			Description *string `json:"description,omitempty"`
			Id          *string `json:"id,omitempty"`

			// Name Name of the privilege.
			Name    *string `json:"name,omitempty"`
			Service *string `json:"service,omitempty"`
			Status  *string `json:"status,omitempty"`
		} `json:"privileges,omitempty"`

		// RoleName Name of the role.
		RoleName *string `json:"roleName,omitempty"`

		// Status Whether the organization's license to use the role is valid or has expired.
		Status *string `json:"status,omitempty"`

		// SystemRole Whether the role is a system-defined role.
		SystemRole *bool `json:"systemRole,omitempty"`

		// UpdateTime Date and time the role was last updated.
		UpdateTime *string `json:"updateTime,omitempty"`

		// UpdatedBy User who last updated the role.
		UpdatedBy *string `json:"updatedBy,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRolePrivilegesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddRolePrivilegesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRolePrivilegesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveRolePrivilegesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveRolePrivilegesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveRolePrivilegesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// GetRolesWithResponse request returning *GetRolesResponse
func (c *ClientWithResponses) GetRolesWithResponse(ctx context.Context, params *GetRolesParams, reqEditors ...RequestEditorFn) (*GetRolesResponse, error) {
	rsp, err := c.GetRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolesResponse(rsp)
}

// CreateRoleWithBodyWithResponse request with arbitrary body returning *CreateRoleResponse
func (c *ClientWithResponses) CreateRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleWithResponse(ctx context.Context, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

// DeleteRoleWithResponse request returning *DeleteRoleResponse
func (c *ClientWithResponses) DeleteRoleWithResponse(ctx context.Context, roleRef PathRole, params *DeleteRoleParams, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error) {
	rsp, err := c.DeleteRole(ctx, roleRef, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleResponse(rsp)
}

// AddRolePrivilegesWithBodyWithResponse request with arbitrary body returning *AddRolePrivilegesResponse
func (c *ClientWithResponses) AddRolePrivilegesWithBodyWithResponse(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRolePrivilegesResponse, error) {
	rsp, err := c.AddRolePrivilegesWithBody(ctx, roleRef, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRolePrivilegesResponse(rsp)
}

func (c *ClientWithResponses) AddRolePrivilegesWithResponse(ctx context.Context, roleRef PathRole, params *AddRolePrivilegesParams, body AddRolePrivilegesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRolePrivilegesResponse, error) {
	rsp, err := c.AddRolePrivileges(ctx, roleRef, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddRolePrivilegesResponse(rsp)
}

// RemoveRolePrivilegesWithBodyWithResponse request with arbitrary body returning *RemoveRolePrivilegesResponse
func (c *ClientWithResponses) RemoveRolePrivilegesWithBodyWithResponse(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveRolePrivilegesResponse, error) {
	rsp, err := c.RemoveRolePrivilegesWithBody(ctx, roleRef, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveRolePrivilegesResponse(rsp)
}

func (c *ClientWithResponses) RemoveRolePrivilegesWithResponse(ctx context.Context, roleRef PathRole, params *RemoveRolePrivilegesParams, body RemoveRolePrivilegesJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveRolePrivilegesResponse, error) {
	rsp, err := c.RemoveRolePrivileges(ctx, roleRef, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveRolePrivilegesResponse(rsp)
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Products Subscribed Informatica products.
			Products *[]struct {
				// BaseApiUrl Base API URL for the product. Use in REST API requests.
				BaseApiUrl *string `json:"baseApiUrl,omitempty"`

				// Name Product name.
				Name *string `json:"name,omitempty"`
			} `json:"products,omitempty"`
			UserInfo *struct {
				// Groups User group information for the user.
				Groups *map[string]interface{} `json:"groups,omitempty"`

				// Id User ID.
				Id *string `json:"id,omitempty"`

				// Name User name.
				Name *string `json:"name,omitempty"`

				// OrgId ID of the organization the user belongs to.
				OrgId *string `json:"orgId,omitempty"`

				// OrgName Organization name.
				OrgName *string `json:"orgName,omitempty"`

				// ParentOrgId Organization ID for the parent.
				ParentOrgId *string `json:"parentOrgId,omitempty"`

				// SessionId REST API session ID for the current session. Use in most REST API request headers.
				SessionId *string `json:"sessionId,omitempty"`

				// Status Status of the user.
				Status *string `json:"status,omitempty"`
			} `json:"userInfo,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRolesResponse parses an HTTP response from a GetRolesWithResponse call
func ParseGetRolesResponse(rsp *http.Response) (*GetRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// CreateTime Date and time the role was created.
			CreateTime *string `json:"createTime,omitempty"`

			// CreatedBy User who created the role.
			CreatedBy *string `json:"createdBy,omitempty"`

			// Description Description of the role.
			Description *string `json:"description,omitempty"`

			// DisplayDescription Description displayed in the user interface.
			DisplayDescription *string `json:"displayDescription,omitempty"`

			// DisplayName Role name displayed in the user interface.
			DisplayName *string `json:"displayName,omitempty"`

			// Id Role ID.
			Id *string `json:"id,omitempty"`

			// OrgId ID of the organization the role belongs to.
			OrgId      *string `json:"orgId,omitempty"`
			Privileges *[]struct {
				// Description Description of the privilege.
				Description *string `json:"description,omitempty"`
				Id          *string `json:"id,omitempty"`

				// Name Name of the privilege.
				Name    *string `json:"name,omitempty"`
				Service *string `json:"service,omitempty"`
				Status  *string `json:"status,omitempty"`
			} `json:"privileges,omitempty"`

			// RoleName Name of the role.
			RoleName *string `json:"roleName,omitempty"`

			// Status Whether the organization's license to use the role is valid or has expired.
			Status *string `json:"status,omitempty"`

			// SystemRole Whether the role is a system-defined role.
			SystemRole *bool `json:"systemRole,omitempty"`

			// UpdateTime Date and time the role was last updated.
			UpdateTime *string `json:"updateTime,omitempty"`

			// UpdatedBy User who last updated the role.
			UpdatedBy *string `json:"updatedBy,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRoleResponse parses an HTTP response from a CreateRoleWithResponse call
func ParseCreateRoleResponse(rsp *http.Response) (*CreateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// CreateTime Date and time the role was created.
			CreateTime *string `json:"createTime,omitempty"`

			// CreatedBy User who created the role.
			CreatedBy *string `json:"createdBy,omitempty"`

			// Description Description of the role.
			Description *string `json:"description,omitempty"`

			// DisplayDescription Description displayed in the user interface.
			DisplayDescription *string `json:"displayDescription,omitempty"`

			// DisplayName Role name displayed in the user interface.
			DisplayName *string `json:"displayName,omitempty"`

			// Id Role ID.
			Id *string `json:"id,omitempty"`

			// OrgId ID of the organization the role belongs to.
			OrgId      *string `json:"orgId,omitempty"`
			Privileges *[]struct {
				// Description Description of the privilege.
				Description *string `json:"description,omitempty"`
				Id          *string `json:"id,omitempty"`

				// Name Name of the privilege.
				Name    *string `json:"name,omitempty"`
				Service *string `json:"service,omitempty"`
				Status  *string `json:"status,omitempty"`
			} `json:"privileges,omitempty"`

			// RoleName Name of the role.
			RoleName *string `json:"roleName,omitempty"`

			// Status Whether the organization's license to use the role is valid or has expired.
			Status *string `json:"status,omitempty"`

			// SystemRole Whether the role is a system-defined role.
			SystemRole *bool `json:"systemRole,omitempty"`

			// UpdateTime Date and time the role was last updated.
			UpdateTime *string `json:"updateTime,omitempty"`

			// UpdatedBy User who last updated the role.
			UpdatedBy *string `json:"updatedBy,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRoleResponse parses an HTTP response from a DeleteRoleWithResponse call
func ParseDeleteRoleResponse(rsp *http.Response) (*DeleteRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddRolePrivilegesResponse parses an HTTP response from a AddRolePrivilegesWithResponse call
func ParseAddRolePrivilegesResponse(rsp *http.Response) (*AddRolePrivilegesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRolePrivilegesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRemoveRolePrivilegesResponse parses an HTTP response from a RemoveRolePrivilegesWithResponse call
func ParseRemoveRolePrivilegesResponse(rsp *http.Response) (*RemoveRolePrivilegesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveRolePrivilegesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
