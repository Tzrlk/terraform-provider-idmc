// Package v3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v3

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GetRolesParamsExpand.
const (
	Privileges GetRolesParamsExpand = "privileges"
)

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	// Password Informatica Intelligent Cloud Services password.
	Password string `json:"password"`

	// Username Informatica Intelligent Cloud Services user name for the organization that you want to log in to.
	Username string `json:"username"`
}

// GetRolesParams defines parameters for GetRoles.
type GetRolesParams struct {
	// Q Query filter. You can filter using one of the following fields:
	// * roleId. Unique identifier for the role.
	// * roleName. Name of the role.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Expand Returns the privileges associated with the role specified in the query filter.
	Expand        *GetRolesParamsExpand `form:"expand,omitempty" json:"expand,omitempty"`
	INFASESSIONID string                `json:"INFA-SESSION-ID"`
}

// GetRolesParamsExpand defines parameters for GetRoles.
type GetRolesParamsExpand string

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoles request
	GetRoles(ctx context.Context, params *GetRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoles(ctx context.Context, params *GetRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saas/public/core/v3/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRolesRequest generates requests for GetRoles
func NewGetRolesRequest(server string, params *GetRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saas/public/core/v3/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "INFA-SESSION-ID", runtime.ParamLocationHeader, params.INFASESSIONID)
		if err != nil {
			return nil, err
		}

		req.Header.Set("INFA-SESSION-ID", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// GetRolesWithResponse request
	GetRolesWithResponse(ctx context.Context, params *GetRolesParams, reqEditors ...RequestEditorFn) (*GetRolesResponse, error)
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Products Subscribed Informatica products.
		Products *[]struct {
			// BaseApiUrl Base API URL for the product. Use in REST API requests.
			BaseApiUrl *string `json:"baseApiUrl,omitempty"`

			// Name Product name.
			Name *string `json:"name,omitempty"`
		} `json:"products,omitempty"`
		UserInfo *struct {
			// Groups User group information for the user.
			Groups *map[string]interface{} `json:"groups,omitempty"`

			// Id User ID.
			Id *string `json:"id,omitempty"`

			// Name User name.
			Name *string `json:"name,omitempty"`

			// OrgId ID of the organization the user belongs to.
			OrgId *string `json:"orgId,omitempty"`

			// OrgName Organization name.
			OrgName *string `json:"orgName,omitempty"`

			// ParentOrgId Organization ID for the parent.
			ParentOrgId *string `json:"parentOrgId,omitempty"`

			// SessionId REST API session ID for the current session. Use in most REST API request headers.
			SessionId *string `json:"sessionId,omitempty"`

			// Status Status of the user.
			Status *N200UserInfoStatus `json:"status,omitempty"`
		} `json:"userInfo,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreateTime         *string `json:"createTime,omitempty"`
		CreatedBy          *string `json:"createdBy,omitempty"`
		Description        *string `json:"description,omitempty"`
		DisplayDescription *string `json:"displayDescription,omitempty"`
		DisplayName        *string `json:"displayName,omitempty"`
		Id                 *string `json:"id,omitempty"`
		OrgId              *string `json:"orgId,omitempty"`
		Privileges         *[]struct {
			Description *string               `json:"description,omitempty"`
			Id          *string               `json:"id,omitempty"`
			Name        *string               `json:"name,omitempty"`
			Service     *string               `json:"service,omitempty"`
			Status      *N200PrivilegesStatus `json:"status,omitempty"`
		} `json:"privileges,omitempty"`
		RoleName   *string     `json:"roleName,omitempty"`
		Status     *N200Status `json:"status,omitempty"`
		SystemRole *bool       `json:"systemRole,omitempty"`
		UpdateTime *string     `json:"updateTime,omitempty"`
		UpdatedBy  *string     `json:"updatedBy,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// GetRolesWithResponse request returning *GetRolesResponse
func (c *ClientWithResponses) GetRolesWithResponse(ctx context.Context, params *GetRolesParams, reqEditors ...RequestEditorFn) (*GetRolesResponse, error) {
	rsp, err := c.GetRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolesResponse(rsp)
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Products Subscribed Informatica products.
			Products *[]struct {
				// BaseApiUrl Base API URL for the product. Use in REST API requests.
				BaseApiUrl *string `json:"baseApiUrl,omitempty"`

				// Name Product name.
				Name *string `json:"name,omitempty"`
			} `json:"products,omitempty"`
			UserInfo *struct {
				// Groups User group information for the user.
				Groups *map[string]interface{} `json:"groups,omitempty"`

				// Id User ID.
				Id *string `json:"id,omitempty"`

				// Name User name.
				Name *string `json:"name,omitempty"`

				// OrgId ID of the organization the user belongs to.
				OrgId *string `json:"orgId,omitempty"`

				// OrgName Organization name.
				OrgName *string `json:"orgName,omitempty"`

				// ParentOrgId Organization ID for the parent.
				ParentOrgId *string `json:"parentOrgId,omitempty"`

				// SessionId REST API session ID for the current session. Use in most REST API request headers.
				SessionId *string `json:"sessionId,omitempty"`

				// Status Status of the user.
				Status *N200UserInfoStatus `json:"status,omitempty"`
			} `json:"userInfo,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRolesResponse parses an HTTP response from a GetRolesWithResponse call
func ParseGetRolesResponse(rsp *http.Response) (*GetRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreateTime         *string `json:"createTime,omitempty"`
			CreatedBy          *string `json:"createdBy,omitempty"`
			Description        *string `json:"description,omitempty"`
			DisplayDescription *string `json:"displayDescription,omitempty"`
			DisplayName        *string `json:"displayName,omitempty"`
			Id                 *string `json:"id,omitempty"`
			OrgId              *string `json:"orgId,omitempty"`
			Privileges         *[]struct {
				Description *string               `json:"description,omitempty"`
				Id          *string               `json:"id,omitempty"`
				Name        *string               `json:"name,omitempty"`
				Service     *string               `json:"service,omitempty"`
				Status      *N200PrivilegesStatus `json:"status,omitempty"`
			} `json:"privileges,omitempty"`
			RoleName   *string     `json:"roleName,omitempty"`
			Status     *N200Status `json:"status,omitempty"`
			SystemRole *bool       `json:"systemRole,omitempty"`
			UpdateTime *string     `json:"updateTime,omitempty"`
			UpdatedBy  *string     `json:"updatedBy,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWTW8bNxD9KwQvBYqV1nCQHgQYhR2lxQL5ahQditgHijtaMeCSFGdoWzX03wtyP7SW",
	"Vkma9GJrOeSbmcc3M3zi0tbOGjCEfPa0z7gya8tnT5wUaeAzfl3WyrDrDwVbW8+K+dtXPOP34FFZw2f8",
	"xfRiesH3GbcOjHCqX8q4E7SJoDxHITB3YaWVzKX1kN+/yLWtlIlWZ5Hif+vAC1LWFCWf8TfJnHEP2wBI",
	"N7bcxU3SGgKT9gvntJLpRP4FbcJCuYFaJFQf8UhBisAJxAfry/i7BJReOWriL8za+lqQkoIVhkBrVYEh",
	"9krbULIF+HslAVkHMOUZr8XjGzAVbfjs8uXLjNPORaKQvDJVpCIgeCNq+GFvEYBFhMQ5bYBZXwmj/knZ",
	"MtoIYjsb2IMwxMgybSumDCP7HeHtG06Vh5LPPh9izQ4k3fWH7OoLSOL7fXMMnTXYMHp5cfEz9+FtGWSS",
	"3BFDi7CKnyso2ZCs7kBMUBHUeIq5EgjXTi29PkW9EQhJw8uPb3pOW8wpWyJE+j6+XnxKm1rNJWcnlzt+",
	"sR8arHRpI8f2J4z2C8J7setUU7TF9zyzytvgRrhaRpkkI1MdV9b0+UXAQSwHz6o8g1XM/0PKy06ko2es",
	"r4qxcpszux5TdBMuW4G2psIRKV9mvFZm+Dnm891oqO+Hvs6G7IQHQ+/HA38GUcwPIkqHfiBYBMS22R37",
	"6oXY7hn6k8FHh52pF29tkU4UzDYgSvDjQkYSFMYqMK1319SJCEyoY7+4lqTuY7cojGh+3n2H2kdW9tlx",
	"1kDBm7b5DfWsmki6nBQyDFIC4jroadubRkeMtxpGEvzbBiaF6QEjeAkklMZEs9A6Zr+zwT9T6S/IEiKz",
	"/vzZKAhSMmjh0+7IXQWpQcIjxV6r51amqELsVHxD5HCW56WVOFWHljeVts6VIaiaqTiRcUbkpSAxGSzn",
	"rSAm7UjOPSBNhFMTD2vwYCTkTguKuJPe1m6evIhLNngJ2LCVV0CkTDWJX5M2s+mGat3O+MGI/hPoY2I4",
	"lY6ogcAjn30+5vuvAH7H1koT+Cnr2G++WUBlKmYNdIJbW63tQ1xcK9Alzm7Nr4nJopyypVHbAEyVYEit",
	"Ffi+LhLX3dbYBaYs/u1Qu6uAR1G79K4ZFcvv26vu/NXVLb+J0QEieyuMqMDf8ttwcXH5Gzw6Ycor59W9",
	"0lAlCuJjhm9jqrzrmHzLs8EIPKmSpzMV0AynDpsJRCuVICjZg6JNnw9DBzKyUKbhvwG2HTJ9JqYm9meB",
	"dbU9yGesqJ8avKanHACLd39cTxavF4vi/btJMefD9wX5AF+j4O4nXxVnngLSgyD4pJpZcNL5GnN5sxu1",
	"PruTMbtCp8Vu/n3buoF0Ym+G8Pm5eTqeDrdzPvNvBX/GqzkXJTZP0nFbP0A6Ab02YqUhimuusPl590Nv",
	"oa4I/0+/GccdEtSxZw1wV9ZqECa9wFz5Ndk05nHZfDup8wMv1fLRwDuecPv9vwEAAP//Z/sFFqoNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
