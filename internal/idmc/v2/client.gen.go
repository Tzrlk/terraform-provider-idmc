// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v2

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	common "terraform-provider-idmc/internal/idmc/common"

	"github.com/oapi-codegen/runtime"
)

// <editor-fold desc="constants" defaultstate="collapsed"> /////////////////////

// </editor-fold> //////////////////////////////////////////////////////////////
// <editor-fold desc="constants" defaultstate="collapsed"> /////////////////////

// </editor-fold> //////////////////////////////////////////////////////////////

// GetAgentInstallerInfoResponseBody defines model for getAgentInstallerInfoResponseBody.
type GetAgentInstallerInfoResponseBody struct {
	Type                *string `json:"@type,omitempty"`
	ChecksumDownloadUrl *string `json:"checksumDownloadUrl,omitempty"`
	DownloadUrl         *string `json:"downloadUrl,omitempty"`
	InstallToken        *string `json:"installToken,omitempty"`
}

// LoginRequestBody defines model for loginRequestBody.
type LoginRequestBody struct {
	Type *string `json:"@type,omitempty"`

	// Password Informatica Intelligent Cloud Services password.
	Password string `json:"password"`

	// Username Informatica Intelligent Cloud Services user name for the organization that you want to log in to.
	Username string `json:"username"`
}

// LoginResponseBody defines model for loginResponseBody.
type LoginResponseBody struct {
	// CreateTime When the user account was created.
	CreateTime *string `json:"createTime,omitempty"`

	// CreatedBy Informatica Intelligent Cloud Services user who created the user account.
	CreatedBy *string `json:"createdBy,omitempty"`

	// Description Description of the user.
	Description *string `json:"description,omitempty"`

	// Emails Email address to be notified when the user changes the account password.
	Emails *string `json:"emails,omitempty"`

	// FirstName First name for the user account.
	FirstName *string `json:"firstName,omitempty"`

	// ForceChangePassword Determines if the user must reset the password after the user logs in for the first time. Includes the following values:
	// True. The user must reset the password.
	// False. The user is not forced to reset the password.
	ForceChangePassword *bool `json:"forceChangePassword,omitempty"`

	// IcSessionId Informatica Intelligent Cloud Services session ID for version 2 REST API session.
	// Use in most version 2 REST API request headers.
	IcSessionId *string `json:"icSessionId,omitempty"`

	// Id User ID.
	Id *string `json:"id,omitempty"`

	// LastName Last name for the user account.
	LastName *string `json:"lastName,omitempty"`

	// Name Informatica Intelligent Cloud Services user name.
	Name *string `json:"name,omitempty"`

	// OrgId ID of the organization the user belongs to. 22 characters.
	// NOTE: Organizations that were created in legacy Informatica Cloud might have an
	// organization ID of 6 characters.
	OrgId *string `json:"orgId,omitempty"`

	// OrgUuid Unique identifier for the organization.
	OrgUuid *string `json:"orgUuid,omitempty"`

	// Password Salesforce user password. Included when user is configured to authenticate through Salesforce.
	Password *string `json:"password,omitempty"`

	// Phone Phone number for the user.
	Phone *string `json:"phone,omitempty"`

	// Roles Object that includes a role object for each role assigned to the user.
	Roles *struct {
		// Description Role description.
		Description *string `json:"description,omitempty"`

		// Name Role name. Returns one of the following codes:
		// Service Consumer
		// Designer
		// Admin
		Name *string `json:"name,omitempty"`
	} `json:"roles,omitempty"`

	// SecurityAnswer Answer to the security question.
	SecurityAnswer *string `json:"securityAnswer,omitempty"`

	// SecurityQuestion Security question. Returns one of the following codes:
	// SPOUSE_MEETING_CITY
	// FIRST_JOB_CITY
	// CHILDHOOD_FRIEND
	// MOTHER_MAIDEN_NAME
	// PET_NAME
	// CHILDHOOD_NICKNAME
	// CUSTOM_QUESTION:"<question>"
	SecurityQuestion *string `json:"securityQuestion,omitempty"`

	// ServerUrl Informatica Intelligent Cloud Services URL for the organization the user belongs
	// to. Use the serverUrl as a base for most version 2 REST API resource URIs.
	ServerUrl *string `json:"serverUrl,omitempty"`

	// SfUsername Salesforce user name. Included when user is configured to authenticate through Salesforce.
	SfUsername *string `json:"sfUsername,omitempty"`

	// SpiUrl This field is no longer applicable and has been deprecated.
	// Deprecated:
	SpiUrl *string `json:"spiUrl,omitempty"`

	// Timezone Time zone of the user. Time zone honors Daylight Saving Time.
	// For more information, see Time zone codes.
	Timezone *string `json:"timezone,omitempty"`

	// Title Title of the user.
	Title *string `json:"title,omitempty"`

	// UpdateTime When the user account was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`

	// UpdatedBy Informatica Intelligent Cloud Services user who last updated the user account.
	UpdatedBy *string `json:"updatedBy,omitempty"`

	// UuId Unique identifier for the user.
	UuId *string `json:"uuId,omitempty"`
}

// RuntimeEnvironment defines model for runtimeEnvironment.
type RuntimeEnvironment struct {
	Agents      *[]interface{} `json:"agents,omitempty"`
	CreateTime  *string        `json:"createTime,omitempty"`
	CreatedBy   *string        `json:"createdBy,omitempty"`
	Description *string        `json:"description,omitempty"`
	FederatedId *string        `json:"federatedId,omitempty"`
	Id          *string        `json:"id,omitempty"`

	// IsShared Whether the Secure Agent group can be shared with sub-organizations.
	IsShared         *bool                   `json:"isShared,omitempty"`
	Name             string                  `json:"name"`
	OrgId            *string                 `json:"orgId,omitempty"`
	ServerlessConfig *map[string]interface{} `json:"serverlessConfig,omitempty"`
	UpdateTime       *string                 `json:"updateTime,omitempty"`
	UpdatedBy        *string                 `json:"updatedBy,omitempty"`
}

// RuntimeEnvironmentDataBulk defines model for runtimeEnvironmentDataBulk.
type RuntimeEnvironmentDataBulk struct {
	Agents           *[]interface{}          `json:"agents,omitempty"`
	CreateTime       *string                 `json:"createTime,omitempty"`
	CreatedBy        *string                 `json:"createdBy,omitempty"`
	Description      *string                 `json:"description,omitempty"`
	FederatedId      *string                 `json:"federatedId,omitempty"`
	Id               *string                 `json:"id,omitempty"`
	Name             *string                 `json:"name,omitempty"`
	OrgId            *string                 `json:"orgId,omitempty"`
	ServerlessConfig *map[string]interface{} `json:"serverlessConfig,omitempty"`
	UpdateTime       *string                 `json:"updateTime,omitempty"`
	UpdatedBy        *string                 `json:"updatedBy,omitempty"`
}

// RuntimeEnvironmentDataMinimal defines model for runtimeEnvironmentDataMinimal.
type RuntimeEnvironmentDataMinimal struct {
	// IsShared Whether the Secure Agent group can be shared with sub-organizations.
	IsShared *bool `json:"isShared,omitempty"`

	// Name Name of the Secure Agent group.
	Name string `json:"name"`
}

// UpdateRuntimeEnvironmentRequestBody defines model for updateRuntimeEnvironmentRequestBody.
type UpdateRuntimeEnvironmentRequestBody struct {
	// Agents Agents assigned to the Secure Agent group.
	Agents *[]UpdateRuntimeEnvironmentRequestBodyAgents `json:"agents,omitempty"`

	// IsShared Whether the Secure Agent group can be shared with sub-organizations.
	IsShared *bool `json:"isShared,omitempty"`

	// Name Name of the Secure Agent group.
	Name string `json:"name"`
}

// UpdateRuntimeEnvironmentRequestBodyAgents defines model for updateRuntimeEnvironmentRequestBodyAgents.
type UpdateRuntimeEnvironmentRequestBodyAgents struct {
	// Id Agent ID.
	Id *string `json:"id,omitempty"`

	// OrgId Organization ID.
	OrgId *string `json:"orgId,omitempty"`
}

// <editor-fold desc="param-types" defaultstate="collapsed"> ///////////////////

// </editor-fold> //////////////////////////////////////////////////////////////

// <editor-fold desc="request-bodies" defaultstate="collapsed"> ////////////////

// CreateRuntimeEnvironmentJSONRequestBody defines body for CreateRuntimeEnvironment for application/json ContentType.
type CreateRuntimeEnvironmentJSONRequestBody = RuntimeEnvironmentDataMinimal

// UpdateRuntimeEnvironmentJSONRequestBody defines body for UpdateRuntimeEnvironment for application/json ContentType.
type UpdateRuntimeEnvironmentJSONRequestBody = UpdateRuntimeEnvironmentRequestBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequestBody

// </editor-fold> //////////////////////////////////////////////////////////////

// <editor-fold desc="client" defaultstate="collapsed"> ////////////////////////

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	common.ClientConfig
}

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...common.ClientOption) (*Client, error) {
	config, err := common.NewClientConfig(server, opts...)
	return &Client{*config}, err
}

var _ common.Client = &Client{}

func (c *Client) Config() *common.ClientConfig {
	return &c.ClientConfig
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAgentInstallerInfo request
	GetAgentInstallerInfo(ctx context.Context, platform string, editors ...common.ClientConfigEditor) (*http.Response, error)

	// ListRuntimeEnvironments request
	ListRuntimeEnvironments(ctx context.Context, editors ...common.ClientConfigEditor) (*http.Response, error)

	// CreateRuntimeEnvironmentWithBody request with any body
	CreateRuntimeEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error)

	CreateRuntimeEnvironment(ctx context.Context, body CreateRuntimeEnvironmentJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error)

	// DeleteRuntimeEnvironment request
	DeleteRuntimeEnvironment(ctx context.Context, id string, editors ...common.ClientConfigEditor) (*http.Response, error)

	// GetRuntimeEnvironment request
	GetRuntimeEnvironment(ctx context.Context, id string, editors ...common.ClientConfigEditor) (*http.Response, error)

	// UpdateRuntimeEnvironmentWithBody request with any body
	UpdateRuntimeEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error)

	UpdateRuntimeEnvironment(ctx context.Context, id string, body UpdateRuntimeEnvironmentJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error)

	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error)
}

func (c *Client) GetAgentInstallerInfo(ctx context.Context, platform string, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewGetAgentInstallerInfoRequest(c.Server, platform)
	})
}

func (c *Client) ListRuntimeEnvironments(ctx context.Context, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewListRuntimeEnvironmentsRequest(c.Server)
	})
}

func (c *Client) CreateRuntimeEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewCreateRuntimeEnvironmentRequestWithBody(c.Server, contentType, body)
	})
}

func (c *Client) CreateRuntimeEnvironment(ctx context.Context, body CreateRuntimeEnvironmentJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewCreateRuntimeEnvironmentRequest(c.Server, body)
	})
}

func (c *Client) DeleteRuntimeEnvironment(ctx context.Context, id string, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewDeleteRuntimeEnvironmentRequest(c.Server, id)
	})
}

func (c *Client) GetRuntimeEnvironment(ctx context.Context, id string, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewGetRuntimeEnvironmentRequest(c.Server, id)
	})
}

func (c *Client) UpdateRuntimeEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewUpdateRuntimeEnvironmentRequestWithBody(c.Server, id, contentType, body)
	})
}

func (c *Client) UpdateRuntimeEnvironment(ctx context.Context, id string, body UpdateRuntimeEnvironmentJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewUpdateRuntimeEnvironmentRequest(c.Server, id, body)
	})
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewLoginRequestWithBody(c.Server, contentType, body)
	})
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, editors ...common.ClientConfigEditor) (*http.Response, error) {
	return c.HandleRequest(ctx, editors, func() (*http.Request, error) {
		return NewLoginRequest(c.Server, body)
	})
}

// NewGetAgentInstallerInfoRequest generates requests for GetAgentInstallerInfo
func NewGetAgentInstallerInfoRequest(server string, platform string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform", runtime.ParamLocationPath, platform)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/agent/installerInfo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRuntimeEnvironmentsRequest generates requests for ListRuntimeEnvironments
func NewListRuntimeEnvironmentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/runtimeEnvironment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRuntimeEnvironmentRequest calls the generic CreateRuntimeEnvironment builder with application/json body
func NewCreateRuntimeEnvironmentRequest(server string, body CreateRuntimeEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRuntimeEnvironmentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRuntimeEnvironmentRequestWithBody generates requests for CreateRuntimeEnvironment with any type of body
func NewCreateRuntimeEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/runtimeEnvironment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRuntimeEnvironmentRequest generates requests for DeleteRuntimeEnvironment
func NewDeleteRuntimeEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/runtimeEnvironment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRuntimeEnvironmentRequest generates requests for GetRuntimeEnvironment
func NewGetRuntimeEnvironmentRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/runtimeEnvironment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRuntimeEnvironmentRequest calls the generic UpdateRuntimeEnvironment builder with application/json body
func NewUpdateRuntimeEnvironmentRequest(server string, id string, body UpdateRuntimeEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRuntimeEnvironmentRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateRuntimeEnvironmentRequestWithBody generates requests for UpdateRuntimeEnvironment with any type of body
func NewUpdateRuntimeEnvironmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/runtimeEnvironment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ma/api/v2/user/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// </editor-fold> //////////////////////////////////////////////////////////////
// <editor-fold desc="client-with-responses" defaultstate="collapsed"> /////////

// ClientWithResponses builds on Client to offer response payloads
type ClientWithResponses struct {
	*Client
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...common.ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAgentInstallerInfoWithResponse request
	GetAgentInstallerInfoWithResponse(ctx context.Context, platform string, editors ...common.ClientConfigEditor) (*GetAgentInstallerInfoResponse, error)

	// ListRuntimeEnvironmentsWithResponse request
	ListRuntimeEnvironmentsWithResponse(ctx context.Context, editors ...common.ClientConfigEditor) (*ListRuntimeEnvironmentsResponse, error)

	// CreateRuntimeEnvironmentWithBodyWithResponse request with any body
	CreateRuntimeEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*CreateRuntimeEnvironmentResponse, error)

	CreateRuntimeEnvironmentWithResponse(ctx context.Context, body CreateRuntimeEnvironmentJSONRequestBody, editors ...common.ClientConfigEditor) (*CreateRuntimeEnvironmentResponse, error)

	// DeleteRuntimeEnvironmentWithResponse request
	DeleteRuntimeEnvironmentWithResponse(ctx context.Context, id string, editors ...common.ClientConfigEditor) (*DeleteRuntimeEnvironmentResponse, error)

	// GetRuntimeEnvironmentWithResponse request
	GetRuntimeEnvironmentWithResponse(ctx context.Context, id string, editors ...common.ClientConfigEditor) (*GetRuntimeEnvironmentResponse, error)

	// UpdateRuntimeEnvironmentWithBodyWithResponse request with any body
	UpdateRuntimeEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*UpdateRuntimeEnvironmentResponse, error)

	UpdateRuntimeEnvironmentWithResponse(ctx context.Context, id string, body UpdateRuntimeEnvironmentJSONRequestBody, editors ...common.ClientConfigEditor) (*UpdateRuntimeEnvironmentResponse, error)

	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, editors ...common.ClientConfigEditor) (*LoginResponse, error)
}

type GetAgentInstallerInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAgentInstallerInfoResponseBody
}

// Status returns HTTPResponse.Status
func (r GetAgentInstallerInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentInstallerInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r GetAgentInstallerInfoResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r GetAgentInstallerInfoResponse) BodyData() []byte {
	return r.Body
}

type ListRuntimeEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListRuntimeEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRuntimeEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r ListRuntimeEnvironmentsResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r ListRuntimeEnvironmentsResponse) BodyData() []byte {
	return r.Body
}

type CreateRuntimeEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeEnvironment
}

// Status returns HTTPResponse.Status
func (r CreateRuntimeEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRuntimeEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r CreateRuntimeEnvironmentResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r CreateRuntimeEnvironmentResponse) BodyData() []byte {
	return r.Body
}

type DeleteRuntimeEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRuntimeEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRuntimeEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r DeleteRuntimeEnvironmentResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r DeleteRuntimeEnvironmentResponse) BodyData() []byte {
	return r.Body
}

type GetRuntimeEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeEnvironment
}

// Status returns HTTPResponse.Status
func (r GetRuntimeEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRuntimeEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r GetRuntimeEnvironmentResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r GetRuntimeEnvironmentResponse) BodyData() []byte {
	return r.Body
}

type UpdateRuntimeEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RuntimeEnvironment
}

// Status returns HTTPResponse.Status
func (r UpdateRuntimeEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRuntimeEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r UpdateRuntimeEnvironmentResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r UpdateRuntimeEnvironmentResponse) BodyData() []byte {
	return r.Body
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponseBody
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// HttpResponse returns HTTPResponse
func (r LoginResponse) HttpResponse() *http.Response {
	return r.HTTPResponse
}

// BodyData returns HTTPResponse.Body
func (r LoginResponse) BodyData() []byte {
	return r.Body
}

// GetAgentInstallerInfoWithResponse request returning *GetAgentInstallerInfoResponse
func (c *ClientWithResponses) GetAgentInstallerInfoWithResponse(ctx context.Context, platform string, editors ...common.ClientConfigEditor) (*GetAgentInstallerInfoResponse, error) {
	rsp, err := c.GetAgentInstallerInfo(ctx, platform, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseGetAgentInstallerInfoResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// ListRuntimeEnvironmentsWithResponse request returning *ListRuntimeEnvironmentsResponse
func (c *ClientWithResponses) ListRuntimeEnvironmentsWithResponse(ctx context.Context, editors ...common.ClientConfigEditor) (*ListRuntimeEnvironmentsResponse, error) {
	rsp, err := c.ListRuntimeEnvironments(ctx, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseListRuntimeEnvironmentsResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// CreateRuntimeEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateRuntimeEnvironmentResponse
func (c *ClientWithResponses) CreateRuntimeEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*CreateRuntimeEnvironmentResponse, error) {
	rsp, err := c.CreateRuntimeEnvironmentWithBody(ctx, contentType, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseCreateRuntimeEnvironmentResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

func (c *ClientWithResponses) CreateRuntimeEnvironmentWithResponse(ctx context.Context, body CreateRuntimeEnvironmentJSONRequestBody, editors ...common.ClientConfigEditor) (*CreateRuntimeEnvironmentResponse, error) {
	rsp, err := c.CreateRuntimeEnvironment(ctx, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseCreateRuntimeEnvironmentResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// DeleteRuntimeEnvironmentWithResponse request returning *DeleteRuntimeEnvironmentResponse
func (c *ClientWithResponses) DeleteRuntimeEnvironmentWithResponse(ctx context.Context, id string, editors ...common.ClientConfigEditor) (*DeleteRuntimeEnvironmentResponse, error) {
	rsp, err := c.DeleteRuntimeEnvironment(ctx, id, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseDeleteRuntimeEnvironmentResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// GetRuntimeEnvironmentWithResponse request returning *GetRuntimeEnvironmentResponse
func (c *ClientWithResponses) GetRuntimeEnvironmentWithResponse(ctx context.Context, id string, editors ...common.ClientConfigEditor) (*GetRuntimeEnvironmentResponse, error) {
	rsp, err := c.GetRuntimeEnvironment(ctx, id, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseGetRuntimeEnvironmentResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// UpdateRuntimeEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateRuntimeEnvironmentResponse
func (c *ClientWithResponses) UpdateRuntimeEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*UpdateRuntimeEnvironmentResponse, error) {
	rsp, err := c.UpdateRuntimeEnvironmentWithBody(ctx, id, contentType, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseUpdateRuntimeEnvironmentResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

func (c *ClientWithResponses) UpdateRuntimeEnvironmentWithResponse(ctx context.Context, id string, body UpdateRuntimeEnvironmentJSONRequestBody, editors ...common.ClientConfigEditor) (*UpdateRuntimeEnvironmentResponse, error) {
	rsp, err := c.UpdateRuntimeEnvironment(ctx, id, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseUpdateRuntimeEnvironmentResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, editors ...common.ClientConfigEditor) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseLoginResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, editors ...common.ClientConfigEditor) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, editors...)
	if err != nil {
		return nil, err
	}
	apiRes, err := ParseLoginResponse(rsp)
	if err != nil {
		return nil, err
	}
	editor := c.Editors.Merge(editors...)
	if err := editor.EditApiResponse(ctx, apiRes); err != nil {
		return nil, err
	}
	return apiRes, nil
}

// ParseGetAgentInstallerInfoResponse parses an HTTP response from a GetAgentInstallerInfoWithResponse call
func ParseGetAgentInstallerInfoResponse(rsp *http.Response) (*GetAgentInstallerInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentInstallerInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAgentInstallerInfoResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRuntimeEnvironmentsResponse parses an HTTP response from a ListRuntimeEnvironmentsWithResponse call
func ParseListRuntimeEnvironmentsResponse(rsp *http.Response) (*ListRuntimeEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRuntimeEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateRuntimeEnvironmentResponse parses an HTTP response from a CreateRuntimeEnvironmentWithResponse call
func ParseCreateRuntimeEnvironmentResponse(rsp *http.Response) (*CreateRuntimeEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRuntimeEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRuntimeEnvironmentResponse parses an HTTP response from a DeleteRuntimeEnvironmentWithResponse call
func ParseDeleteRuntimeEnvironmentResponse(rsp *http.Response) (*DeleteRuntimeEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRuntimeEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRuntimeEnvironmentResponse parses an HTTP response from a GetRuntimeEnvironmentWithResponse call
func ParseGetRuntimeEnvironmentResponse(rsp *http.Response) (*GetRuntimeEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRuntimeEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRuntimeEnvironmentResponse parses an HTTP response from a UpdateRuntimeEnvironmentWithResponse call
func ParseUpdateRuntimeEnvironmentResponse(rsp *http.Response) (*UpdateRuntimeEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRuntimeEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RuntimeEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// </editor-fold> //////////////////////////////////////////////////////////////
